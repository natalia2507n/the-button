name: Pipeline CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests
        run: |
          python manage.py test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: the-button:${{ github.sha }}
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'the-button:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL'
          timeout: '5m'

      - name: Generate Trivy SARIF report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'the-button:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Test Docker image
        run: |
          docker run --name test-container -d -p 8000:8000 the-button:${{ github.sha }}
          for i in {1..10}; do
            if curl -s http://localhost:8000/ | grep -q "Ping"; then
              echo "Application available!"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "Application test timed out"
              exit 1
            fi
            echo "Retry $i â€“ Waiting 1 sec..."
            sleep 1
          done
          docker stop test-container
          docker rm test-container

      - name: Tag and push Docker image
        if: github.event_name != 'pull_request'
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          docker tag the-button:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/the-button:${SHORT_SHA}
          docker tag the-button:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/the-button:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/the-button:${SHORT_SHA}
          docker push ${{ secrets.DOCKER_USERNAME }}/the-button:latest

  deploy-to-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Show environment variables
        run: |
          echo "Deploying to ${{ vars.ENVIRONMENT_NAME }} environment"
          echo "Using token: ${{ secrets.DEPLOY_TOKEN != '' && '***' || 'Not set' }}"

      - name: Mock deployment
        run: |
          echo "Starting deployment to development environment..."
          sleep 5
          echo "Deployment to development environment completed!"

  deploy-to-production:
    needs: deploy-to-dev
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Show environment variables
        run: |
          echo "Deploying to ${{ vars.ENVIRONMENT_NAME }} environment"
          echo "Using token: ${{ secrets.DEPLOY_TOKEN != '' && '***' || 'Not set' }}"

      - name: Mock deployment
        run: |
          echo "Starting deployment to production environment..."
          sleep 10
          echo "Deployment to production environment completed!"
